{
  "service": {
    "service": "serverless-iot-rest-api",
    "serviceObject": {
      "name": "serverless-iot-rest-api"
    },
    "provider": {
      "name": "aws",
      "region": "us-east-1",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CraeteUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-iot-rest-api-dev-craeteUsers"
            }
          },
          "ReadUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-iot-rest-api-dev-readUsers"
            }
          },
          "CraeteLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-iot-rest-api-dev-craeteLogs"
            }
          },
          "ReadLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-iot-rest-api-dev-readLogs"
            }
          },
          "HeartBeatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-iot-rest-api-dev-heartBeats"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-iot-rest-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-iot-rest-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-iot-rest-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-iot-rest-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CraeteUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z/serverless-iot-rest-api.zip"
              },
              "Handler": "functions/users/createUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-iot-rest-api-dev-craeteUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to create a new user!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CraeteUsersLogGroup"
            ]
          },
          "ReadUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z/serverless-iot-rest-api.zip"
              },
              "Handler": "functions/users/readUser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-iot-rest-api-dev-readUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to get all usera from database!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadUsersLogGroup"
            ]
          },
          "CraeteLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z/serverless-iot-rest-api.zip"
              },
              "Handler": "functions/logs/createLog.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-iot-rest-api-dev-craeteLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to create a new log information with timestamp for each record!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CraeteLogsLogGroup"
            ]
          },
          "ReadLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z/serverless-iot-rest-api.zip"
              },
              "Handler": "functions/logs/readLog.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-iot-rest-api-dev-readLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to read a log information with its timestamp!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadLogsLogGroup"
            ]
          },
          "HeartBeatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z/serverless-iot-rest-api.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-iot-rest-api-dev-heartBeats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "lambda to ensure that everything is ok!",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HeartBeatsLogGroup"
            ]
          },
          "CraeteUsersLambdaVersionOeuG8et8YAhHFZiWpHiNU1puxm8xz8T0nTF9KULZo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CraeteUsersLambdaFunction"
              },
              "CodeSha256": "Xjc43JLE9mRR2f6qIhiv6J39FXKt74eypHzbBiBGicA=",
              "Description": "lambda to create a new user!"
            }
          },
          "ReadUsersLambdaVersion0drzjyUzErEI3ZXYoBBApKy9Ws7VNHjUrIrjuVjs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadUsersLambdaFunction"
              },
              "CodeSha256": "Xjc43JLE9mRR2f6qIhiv6J39FXKt74eypHzbBiBGicA=",
              "Description": "lambda to get all usera from database!"
            }
          },
          "CraeteLogsLambdaVersionoDxIF6s4cCgBTPUGCRB6G9YYut5HDH3JG2UTUTtBkA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CraeteLogsLambdaFunction"
              },
              "CodeSha256": "Xjc43JLE9mRR2f6qIhiv6J39FXKt74eypHzbBiBGicA=",
              "Description": "lambda to create a new log information with timestamp for each record!"
            }
          },
          "ReadLogsLambdaVersionK9zviaz0ZZGb7ZEI9dzNkUF0m8cVubTs18HLPhE3s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadLogsLambdaFunction"
              },
              "CodeSha256": "Xjc43JLE9mRR2f6qIhiv6J39FXKt74eypHzbBiBGicA=",
              "Description": "lambda to read a log information with its timestamp!"
            }
          },
          "HeartBeatsLambdaVersioneb7dvxgOjKb1HFoZ0yZWs1kDJbDSJpLFK3NLnzb94Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HeartBeatsLambdaFunction"
              },
              "CodeSha256": "Xjc43JLE9mRR2f6qIhiv6J39FXKt74eypHzbBiBGicA=",
              "Description": "lambda to ensure that everything is ok!"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-serverless-iot-rest-api",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CraeteUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CraeteUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCraeteUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CraeteUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV0UsersCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v0/users/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCraeteUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCraeteUsers"
          },
          "ReadUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0UsersRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/users/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadUsers"
          },
          "CraeteLogsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CraeteLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCraeteLogs": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CraeteLogsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV0LogsCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v0/logs/create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCraeteLogs"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCraeteLogs"
          },
          "ReadLogsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadLogs": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadLogsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0LogsRead": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0/logs/read",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadLogs"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReadLogs"
          },
          "HeartBeatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HeartBeatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHeartBeats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HeartBeatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV0": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v0",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHeartBeats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHeartBeats"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "CraeteUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CraeteUsersLambdaVersionOeuG8et8YAhHFZiWpHiNU1puxm8xz8T0nTF9KULZo"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-CraeteUsersLambdaFunctionQualifiedArn"
            }
          },
          "ReadUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadUsersLambdaVersion0drzjyUzErEI3ZXYoBBApKy9Ws7VNHjUrIrjuVjs"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-ReadUsersLambdaFunctionQualifiedArn"
            }
          },
          "CraeteLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CraeteLogsLambdaVersionoDxIF6s4cCgBTPUGCRB6G9YYut5HDH3JG2UTUTtBkA"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-CraeteLogsLambdaFunctionQualifiedArn"
            }
          },
          "ReadLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadLogsLambdaVersionK9zviaz0ZZGb7ZEI9dzNkUF0m8cVubTs18HLPhE3s"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-ReadLogsLambdaFunctionQualifiedArn"
            }
          },
          "HeartBeatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HeartBeatsLambdaVersioneb7dvxgOjKb1HFoZ0yZWs1kDJbDSJpLFK3NLnzb94Q"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-HeartBeatsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-iot-rest-api-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "craeteUsers": {
        "handler": "functions/users/createUser.handler",
        "description": "lambda to create a new user!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v0/users/create"
          }
        ],
        "name": "serverless-iot-rest-api-dev-craeteUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CraeteUsersLambdaVersionOeuG8et8YAhHFZiWpHiNU1puxm8xz8T0nTF9KULZo"
      },
      "readUsers": {
        "handler": "functions/users/readUser.handler",
        "description": "lambda to get all usera from database!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/users/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/users/read"
          }
        ],
        "name": "serverless-iot-rest-api-dev-readUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadUsersLambdaVersion0drzjyUzErEI3ZXYoBBApKy9Ws7VNHjUrIrjuVjs"
      },
      "craeteLogs": {
        "handler": "functions/logs/createLog.handler",
        "description": "lambda to create a new log information with timestamp for each record!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/logs/create",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v0/logs/create"
          }
        ],
        "name": "serverless-iot-rest-api-dev-craeteLogs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CraeteLogsLambdaVersionoDxIF6s4cCgBTPUGCRB6G9YYut5HDH3JG2UTUTtBkA"
      },
      "readLogs": {
        "handler": "functions/logs/readLog.handler",
        "description": "lambda to read a log information with its timestamp!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0/logs/read",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0/logs/read"
          }
        ],
        "name": "serverless-iot-rest-api-dev-readLogs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ReadLogsLambdaVersionK9zviaz0ZZGb7ZEI9dzNkUF0m8cVubTs18HLPhE3s"
      },
      "heartBeats": {
        "handler": "index.handler",
        "description": "lambda to ensure that everything is ok!",
        "events": [
          {
            "httpApi": {
              "path": "/api/v0",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v0"
          }
        ],
        "name": "serverless-iot-rest-api-dev-heartBeats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HeartBeatsLambdaVersioneb7dvxgOjKb1HFoZ0yZWs1kDJbDSJpLFK3NLnzb94Q"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "serverless-iot-rest-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\4th_year_materials\\myTeamWorks\\khalid\\IOT_expressjs_restAPI-main\\api\\.serverless\\serverless-iot-rest-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-iot-rest-api/dev/1679663190343-2023-03-24T13:06:30.343Z",
    "artifact": "serverless-iot-rest-api.zip"
  }
}