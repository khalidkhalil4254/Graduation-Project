{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CraeteLogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-LogsRestApi-dev-craeteLogs"
      }
    },
    "ReadLogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-LogsRestApi-dev-readLogs"
      }
    },
    "DeleteLogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-LogsRestApi-dev-deleteLogs"
      }
    },
    "HeartBeatsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/IoT-SES-LogsRestApi-dev-heartBeats"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "IoT-SES-LogsRestApi",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-LogsRestApi-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/IoT-SES-LogsRestApi-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "IoT-SES-LogsRestApi",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CraeteLogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-LogsRestApi/dev/1688859864000-2023-07-08T23:44:24.000Z/IoT-SES-LogsRestApi.zip"
        },
        "Handler": "createLog.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-LogsRestApi-dev-craeteLogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to create a new log information with timestamp for each record!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CraeteLogsLogGroup"
      ]
    },
    "ReadLogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-LogsRestApi/dev/1688859864000-2023-07-08T23:44:24.000Z/IoT-SES-LogsRestApi.zip"
        },
        "Handler": "readLog.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-LogsRestApi-dev-readLogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to read a log information with its timestamp!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadLogsLogGroup"
      ]
    },
    "DeleteLogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-LogsRestApi/dev/1688859864000-2023-07-08T23:44:24.000Z/IoT-SES-LogsRestApi.zip"
        },
        "Handler": "deleteLog.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-LogsRestApi-dev-deleteLogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to delete existing log information!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteLogsLogGroup"
      ]
    },
    "HeartBeatsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/IoT-SES-LogsRestApi/dev/1688859864000-2023-07-08T23:44:24.000Z/IoT-SES-LogsRestApi.zip"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "IoT-SES-LogsRestApi-dev-heartBeats",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "lambda to ensure that everything is ok!",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HeartBeatsLogGroup"
      ]
    },
    "CraeteLogsLambdaVersionw5VzhXiyNBalH8JzxHJivTqBpCMCy4QW0cUr8G18K0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CraeteLogsLambdaFunction"
        },
        "CodeSha256": "Lt5/fffnBYhZuOEX4DLf46uJ5M9gkHcVN/4cqLZbubo=",
        "Description": "lambda to create a new log information with timestamp for each record!"
      }
    },
    "ReadLogsLambdaVersionf06BLLdNgoAZUyjaf20KUNmiG71t6IAAcjk7d6VJpcI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadLogsLambdaFunction"
        },
        "CodeSha256": "Lt5/fffnBYhZuOEX4DLf46uJ5M9gkHcVN/4cqLZbubo=",
        "Description": "lambda to read a log information with its timestamp!"
      }
    },
    "DeleteLogsLambdaVersionpC3NWFOtxO1qjGLNIjHILFVPQ6tAVs1nojaqdqLDQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteLogsLambdaFunction"
        },
        "CodeSha256": "Lt5/fffnBYhZuOEX4DLf46uJ5M9gkHcVN/4cqLZbubo=",
        "Description": "lambda to delete existing log information!"
      }
    },
    "HeartBeatsLambdaVersion06CcNOyZWaTgojAbpewscdrX6mURWRB6oiqNXdlqlY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HeartBeatsLambdaFunction"
        },
        "CodeSha256": "Lt5/fffnBYhZuOEX4DLf46uJ5M9gkHcVN/4cqLZbubo=",
        "Description": "lambda to ensure that everything is ok!"
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-IoT-SES-LogsRestApi",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CraeteLogsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CraeteLogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCraeteLogs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CraeteLogsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiV0LogsCreate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/v0/logs/create",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCraeteLogs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCraeteLogs"
    },
    "ReadLogsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadLogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationReadLogs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ReadLogsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV0LogsRead": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v0/logs/read",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationReadLogs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationReadLogs"
    },
    "DeleteLogsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteLogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteLogs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteLogsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteApiV0LogsDelete": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /api/v0/logs/delete",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteLogs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteLogs"
    },
    "HeartBeatsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HeartBeatsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHeartBeats": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HeartBeatsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiV0Logs": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/v0/logs",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHeartBeats"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHeartBeats"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-ServerlessDeploymentBucketName"
      }
    },
    "CraeteLogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CraeteLogsLambdaVersionw5VzhXiyNBalH8JzxHJivTqBpCMCy4QW0cUr8G18K0"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-CraeteLogsLambdaFunctionQualifiedArn"
      }
    },
    "ReadLogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadLogsLambdaVersionf06BLLdNgoAZUyjaf20KUNmiG71t6IAAcjk7d6VJpcI"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-ReadLogsLambdaFunctionQualifiedArn"
      }
    },
    "DeleteLogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteLogsLambdaVersionpC3NWFOtxO1qjGLNIjHILFVPQ6tAVs1nojaqdqLDQ"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-DeleteLogsLambdaFunctionQualifiedArn"
      }
    },
    "HeartBeatsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HeartBeatsLambdaVersion06CcNOyZWaTgojAbpewscdrX6mURWRB6oiqNXdlqlY"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-HeartBeatsLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-IoT-SES-LogsRestApi-dev-HttpApiUrl"
      }
    }
  }
}